#!/usr/bin/env python

import os, glob, wx, traceback, keyword
import wx.xrc as xrc
import wx.stc as stc

import magnetism_core as magnetism
import magnetism_core.images as images
import magnetism_core.xrcdata as xrcdata
import magnetism_core.scriptools as scriptools


""" TODO
* Add Add / Remove / Edit code
	For new use: uuid.uuid4()
* Fix large size of button choice dialog
* Implement exporting to standalone script
* In editor choose icon / import new image
"""


def loadScripts(path):
	scripts = []

	errors = []
	for f in glob.glob( os.path.join(path, "*.%s" % magnetism.FILE_EXTENSION) ):
		try:
			s = magnetism.Script(filename=f)
		except magnetism.ScriptulFileError:
			errors.append(f)
		else:
			scripts.append(s)

	if len(errors):
		msg = "Errors were encountered loading the following files:\n\n" + "\n".join(errors)
		scriptools.dialogMessage(title=magnetism.APP_NAME, message=msg, flags=wx.ICON_ERROR)

	return scripts


class PythonEditor(stc.StyledTextCtrl):
	faces = { 'times': 'Times',
	'mono' : 'Monospace',
	'helv' : 'Helvetica',
	'other': 'new century schoolbook',
	'size' : 10,
	'size2': 8,
	}

	def __init__(self, parent, style=0):
		stc.StyledTextCtrl.__init__(self, parent, style=style)
		self.setStyle()
		self.Bind(stc.EVT_STC_MARGINCLICK, self.OnMarginClick)

	def setStyle(self):
		# Almost all of this function is borrored from the wxPython documentation

		self._styles = [None] * 32
		self._free = 1

		self.SetLexer(stc.STC_LEX_PYTHON)
		self.SetKeyWords(0, " ".join(keyword.kwlist))

		self.SetProperty("fold", "1")
		self.SetProperty("tab.timmy.whinge.level", "1")

		self.SetViewWhiteSpace(False)

		self.SetMarginType(2, stc.STC_MARGIN_SYMBOL)
		self.SetMarginMask(2, stc.STC_MASK_FOLDERS)
		self.SetMarginSensitive(2, True)
		self.SetMarginWidth(2, 12)

		# Like a flattened tree control using square headers
		self.MarkerDefine(stc.STC_MARKNUM_FOLDEROPEN, stc.STC_MARK_BOXMINUS, "white", "#808080")
		self.MarkerDefine(stc.STC_MARKNUM_FOLDER, stc.STC_MARK_BOXPLUS, "white", "#808080")
		self.MarkerDefine(stc.STC_MARKNUM_FOLDERSUB, stc.STC_MARK_VLINE, "white", "#808080")
		self.MarkerDefine(stc.STC_MARKNUM_FOLDERTAIL, stc.STC_MARK_LCORNER, "white", "#808080")
		self.MarkerDefine(stc.STC_MARKNUM_FOLDEREND, stc.STC_MARK_BOXPLUSCONNECTED, "white", "#808080")
		self.MarkerDefine(stc.STC_MARKNUM_FOLDEROPENMID, stc.STC_MARK_BOXMINUSCONNECTED, "white", "#808080")
		self.MarkerDefine(stc.STC_MARKNUM_FOLDERMIDTAIL, stc.STC_MARK_TCORNER, "white", "#808080")

		# Make some styles, The lexer defines what each style is used for, we
		# just have to define what each style looks like. This set is adapted from
		# Scintilla sample property files.

		# TODO make hightlighting the same as gedit (inspect the colours)
		# Global default styles for all languages
		self.StyleSetSpec(stc.STC_STYLE_DEFAULT, "face:%(mono)s,size:%(size)d" % self.faces)
		self.StyleClearAll() # Reset all to be like the default

		# Global default styles for all languages
		self.StyleSetSpec(stc.STC_STYLE_DEFAULT, "face:%(mono)s,size:%(size)d" % self.faces)
		self.StyleSetSpec(stc.STC_STYLE_LINENUMBER, "back:#C0C0C0,face:%(mono)s,size:%(size2)d" % self.faces)
		self.StyleSetSpec(stc.STC_STYLE_CONTROLCHAR, "face:%(other)s" % self.faces)
		self.StyleSetSpec(stc.STC_STYLE_BRACELIGHT, "fore:#FFFFFF,back:#0000FF,bold")
		self.StyleSetSpec(stc.STC_STYLE_BRACEBAD, "fore:#000000,back:#FF0000,bold")

		# Python styles
		# Default
		self.StyleSetSpec(stc.STC_P_DEFAULT, "fore:#000000,face:%(mono)s,size:%(size)d" % self.faces)
		# Comments
		self.StyleSetSpec(stc.STC_P_COMMENTLINE, "fore:#007F00,face:%(other)s,size:%(size)d" % self.faces)
		# Number
		self.StyleSetSpec(stc.STC_P_NUMBER, "fore:#007F7F,size:%(size)d" % self.faces)
		# String
		self.StyleSetSpec(stc.STC_P_STRING, "fore:#7F007F,face:%(mono)s,size:%(size)d" % self.faces)
		# Single quoted string
		self.StyleSetSpec(stc.STC_P_CHARACTER, "fore:#7F007F,face:%(mono)s,size:%(size)d" % self.faces)
		# Keyword
		self.StyleSetSpec(stc.STC_P_WORD, "fore:#00007F,bold,size:%(size)d" % self.faces)
		# Triple quotes
		self.StyleSetSpec(stc.STC_P_TRIPLE, "fore:#7F0000,size:%(size)d" % self.faces)
		# Triple double quotes
		self.StyleSetSpec(stc.STC_P_TRIPLEDOUBLE, "fore:#7F0000,size:%(size)d" % self.faces)
		# Class name definition
		self.StyleSetSpec(stc.STC_P_CLASSNAME, "fore:#0000FF,bold,underline,size:%(size)d" % self.faces)
		# Function or method name definition
		self.StyleSetSpec(stc.STC_P_DEFNAME, "fore:#007F7F,bold,size:%(size)d" % self.faces)
		# Operators
		self.StyleSetSpec(stc.STC_P_OPERATOR, "bold,size:%(size)d" % self.faces)
		# Identifiers
		self.StyleSetSpec(stc.STC_P_IDENTIFIER, "fore:#000000,face:%(mono)s,size:%(size)d" % self.faces)
		# Comment-blocks
		self.StyleSetSpec(stc.STC_P_COMMENTBLOCK, "fore:#7F7F7F,size:%(size)d" % self.faces)
		# End of line where string is not closed
		self.StyleSetSpec(stc.STC_P_STRINGEOL, "fore:#000000,face:%(mono)s,back:#E0C0E0,eol,size:%(size)d" % self.faces)

		self.SetCaretForeground("BLUE")

	def OnMarginClick(self, evt):
		# Fold or unfold code
		if evt.GetMargin() == 2:
			lineClicked = self.LineFromPosition( evt.GetPosition() )
		if self.GetFoldLevel(lineClicked) & stc.STC_FOLDLEVELHEADERFLAG:
			self.ToggleFold(lineClicked)

	def write(self, text):
		self.SetText(text)
		self.EmptyUndoBuffer()

	def read(self):
		return self.GetText()


class FrameEditor(wx.Frame):
	def __init__(self, parent, id, title):
		wx.Frame.__init__(self, parent, id, title)

		vbox = wx.BoxSizer(wx.VERTICAL)

		toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL | wx.NO_BORDER) 
		toolbar.AddSimpleTool( id=wx.ID_SAVE, bitmap=wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE) )
		toolbar.AddSeparator()
		toolbar.AddSimpleTool( id=wx.ID_CUT, bitmap=wx.ArtProvider.GetBitmap(wx.ART_CUT) )
		toolbar.AddSimpleTool( id=wx.ID_COPY, bitmap=wx.ArtProvider.GetBitmap(wx.ART_COPY) )
		toolbar.AddSimpleTool( id=wx.ID_PASTE, bitmap=wx.ArtProvider.GetBitmap(wx.ART_PASTE) )
		toolbar.AddSeparator()
		toolbar.AddSimpleTool( id=wx.ID_UNDO, bitmap=wx.ArtProvider.GetBitmap(wx.ART_UNDO) )
		toolbar.AddSimpleTool( id=wx.ID_REDO, bitmap=wx.ArtProvider.GetBitmap(wx.ART_REDO) )
		toolbar.Realize()

		vbox.Add(toolbar, 0, border=5)

		pvbox = wx.BoxSizer(wx.VERTICAL)
		panel = wx.Panel(self)
		self.editor = PythonEditor(panel)
		pvbox.Add(self.editor, proportion=1, flag=wx.EXPAND|wx.ALL, border=5)
		panel.SetSizer(pvbox)
		vbox.Add(panel, proportion=1, flag=wx.EXPAND|wx.ALL, border=5)

		self.SetSizer(vbox)
		self.Centre()

		self.Bind(wx.EVT_TOOL, self.OnSave, id=wx.ID_SAVE)
		self.Bind(wx.EVT_TOOL, self.OnCut, id=wx.ID_CUT)
		self.Bind(wx.EVT_TOOL, self.OnCopy, id=wx.ID_COPY)
		self.Bind(wx.EVT_TOOL, self.OnPaste, id=wx.ID_PASTE)
		self.Bind(wx.EVT_TOOL, self.OnUndo, id=wx.ID_UNDO)
		self.Bind(wx.EVT_TOOL, self.OnRedo, id=wx.ID_REDO)
		self.Bind(wx.EVT_CLOSE, self.OnCloseEvent)

		icon = wx.EmptyIcon()
		icon.CopyFromBitmap( images.getMagnet32Bitmap() )
		self.SetIcon(icon)

	def OnSave(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Save not implemented")

	def OnCut(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Cut not implemented")

	def OnCopy(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Copy not implemented")

	def OnPaste(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Paste not implemented")

	def OnUndo(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Undo not implemented")

	def OnRedo(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Redo not implemented")

	def OnCloseEvent(self, event):
		# TODO confirm if not saved
		self.Destroy()

	def setEditorText(self, text):
		self.editor.write(text)


class DialogMain(wx.Dialog):
	def __init__(self, parent, id, title):
		wx.Dialog.__init__(self, parent, id, title)

		res = xrc.EmptyXmlResource()
		res.LoadFromString(xrcdata.xml)
		self.panel = res.LoadPanel(self, 'PanelMain')

		self.listCtrlMain = xrc.XRCCTRL(self.panel, 'listCtrlMain')

		self.listCtrlMain.Bind(wx.EVT_SIZE, self.OnSize)
		self.listCtrlMain.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnActivate)

		self.Bind( wx.EVT_BUTTON, self.OnClose, id=xrc.XRCID('m_buttonClose') )
		self.Bind( wx.EVT_BUTTON, self.OnHelp, id=xrc.XRCID('m_buttonHelp') )
		self.Bind( wx.EVT_BUTTON, self.OnAdd, id=xrc.XRCID('m_buttonAdd') )
		self.Bind( wx.EVT_BUTTON, self.OnRemove, id=xrc.XRCID('m_buttonRemove') )
		self.Bind( wx.EVT_BUTTON, self.OnEdit, id=xrc.XRCID('m_buttonEdit') )
		self.Bind( wx.EVT_BUTTON, self.OnExport, id=xrc.XRCID('m_buttonExport') )

		self.Bind(wx.EVT_CLOSE, self.OnCloseEvent)

		if not os.path.isdir(magnetism.magnetismHomePath):
			os.mkdir(magnetism.magnetismHomePath)

		self.listCtrlMain.InsertColumn(0, '')

		if not os.path.isdir(magnetism.scriptsPath):
			os.mkdir(magnetism.scriptsPath)
			self.scipts = []
		else:
			self.scripts = loadScripts(magnetism.scriptsPath)
			self.loadList()

		icon = wx.EmptyIcon()
		icon.CopyFromBitmap( images.getMagnet32Bitmap() )
		self.SetIcon(icon)

		self.Center()
		self.Show(True)


	def loadList(self):
		self.listCtrlMain.DeleteAllItems()
		self.scripts.reverse()

		self.il = wx.ImageList(32, 32)
		for s in self.scripts:
			if s.getBitmap() == None:
				s.loadBitmap()
			self.il.Add( s.getBitmap() )

		self.listCtrlMain.SetImageList(self.il, wx.IMAGE_LIST_SMALL)

		for i, s in enumerate(self.scripts):
			self.listCtrlMain.InsertStringItem(0, s.title)
			self.listCtrlMain.SetItemImage(0, i)
			s.listID = i

		self.scripts.reverse()

	def OnCloseEvent(self, event):
		self.Destroy()

	def OnClose(self, event):
		self.Close()
		self.Destroy()

	def OnHelp(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Help not implemented")

	def OnAdd(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Add not implemented")

	def OnRemove(self, event):
		scriptools.dialogMessage(title=magnetism.APP_NAME, message="Remove not implemented")

	def OnEdit(self, event):
		index = self.listCtrlMain.GetFirstSelected()
		if index >= 0:
			script = self.scripts[index]

			frame = FrameEditor(parent=None, id=-1, title=magnetism.APP_NAME)

			frame.setEditorText(script.code)
			frame.Show()

	def OnExport(self, event):
		index = self.listCtrlMain.GetFirstSelected()
		if index >= 0:
			script = self.scripts[index]

			filters = 'Python scripts (*.py)|*.py|All files (*.*)|*.*'
			dlg = wx.FileDialog(self, style=wx.SAVE, wildcard=filters)
			if dlg.ShowModal() == wx.ID_OK:
				filename = dlg.GetPath()
				path, name = os.path.split(filename)
				if os.path.isdir(path):
					open(filename, "w").write( script.getExported() )
					scriptools.dialogMessage(title=magnetism.APP_NAME, message="Script exported to %s" % filename)

			dlg.Destroy()

	def OnSize(self, event):
		size = self.listCtrlMain.GetSize()
		self.listCtrlMain.SetColumnWidth(0, size.x-5)
		event.Skip()

	def OnActivate(self, event):
		script = self.scripts[ event.GetIndex() ]
		script.run()


if __name__ == "__main__":
	app = wx.App()
	dialogMain = DialogMain(parent=None, id=-1, title=magnetism.APP_NAME)
	app.MainLoop()

